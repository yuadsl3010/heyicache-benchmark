// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package main

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestPB struct {
	Id           uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestString   string            `protobuf:"bytes,2,opt,name=test_string,json=testString,proto3" json:"test_string,omitempty"`
	TestStrings  []string          `protobuf:"bytes,3,rep,name=test_strings,json=testStrings,proto3" json:"test_strings,omitempty"`
	TestMap      map[string]string `protobuf:"bytes,4,rep,name=test_map,json=testMap,proto3" json:"test_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TestUint64S  []uint64          `protobuf:"varint,5,rep,packed,name=test_uint64s,json=testUint64s,proto3" json:"test_uint64s,omitempty"`
	TestBytes    []byte            `protobuf:"bytes,6,opt,name=test_bytes,json=testBytes,proto3" json:"test_bytes,omitempty"`
	TestFloats   []float32         `protobuf:"fixed32,7,rep,packed,name=test_floats,json=testFloats,proto3" json:"test_floats,omitempty"`
	TestChild    *TestPBChild      `protobuf:"bytes,100,opt,name=test_child,json=testChild,proto3" json:"test_child,omitempty"`
	TestChildren []*TestPBChild    `protobuf:"bytes,101,rep,name=test_children,json=testChildren,proto3" json:"test_children,omitempty"`
}

func (m *TestPB) Reset()         { *m = TestPB{} }
func (m *TestPB) String() string { return proto.CompactTextString(m) }
func (*TestPB) ProtoMessage()    {}
func (*TestPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *TestPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPB.Merge(m, src)
}
func (m *TestPB) XXX_Size() int {
	return m.Size()
}
func (m *TestPB) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPB.DiscardUnknown(m)
}

var xxx_messageInfo_TestPB proto.InternalMessageInfo

func (m *TestPB) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TestPB) GetTestString() string {
	if m != nil {
		return m.TestString
	}
	return ""
}

func (m *TestPB) GetTestStrings() []string {
	if m != nil {
		return m.TestStrings
	}
	return nil
}

func (m *TestPB) GetTestMap() map[string]string {
	if m != nil {
		return m.TestMap
	}
	return nil
}

func (m *TestPB) GetTestUint64S() []uint64 {
	if m != nil {
		return m.TestUint64S
	}
	return nil
}

func (m *TestPB) GetTestBytes() []byte {
	if m != nil {
		return m.TestBytes
	}
	return nil
}

func (m *TestPB) GetTestFloats() []float32 {
	if m != nil {
		return m.TestFloats
	}
	return nil
}

func (m *TestPB) GetTestChild() *TestPBChild {
	if m != nil {
		return m.TestChild
	}
	return nil
}

func (m *TestPB) GetTestChildren() []*TestPBChild {
	if m != nil {
		return m.TestChildren
	}
	return nil
}

type TestPBChild struct {
	Id          uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestString  string            `protobuf:"bytes,2,opt,name=test_string,json=testString,proto3" json:"test_string,omitempty"`
	TestStrings []string          `protobuf:"bytes,3,rep,name=test_strings,json=testStrings,proto3" json:"test_strings,omitempty"`
	TestMap     map[string]string `protobuf:"bytes,4,rep,name=test_map,json=testMap,proto3" json:"test_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TestUint64S []uint64          `protobuf:"varint,5,rep,packed,name=test_uint64s,json=testUint64s,proto3" json:"test_uint64s,omitempty"`
	TestBytes   []byte            `protobuf:"bytes,6,opt,name=test_bytes,json=testBytes,proto3" json:"test_bytes,omitempty"`
	TestFloats  []float32         `protobuf:"fixed32,7,rep,packed,name=test_floats,json=testFloats,proto3" json:"test_floats,omitempty"`
}

func (m *TestPBChild) Reset()         { *m = TestPBChild{} }
func (m *TestPBChild) String() string { return proto.CompactTextString(m) }
func (*TestPBChild) ProtoMessage()    {}
func (*TestPBChild) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}
func (m *TestPBChild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestPBChild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestPBChild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestPBChild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPBChild.Merge(m, src)
}
func (m *TestPBChild) XXX_Size() int {
	return m.Size()
}
func (m *TestPBChild) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPBChild.DiscardUnknown(m)
}

var xxx_messageInfo_TestPBChild proto.InternalMessageInfo

func (m *TestPBChild) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TestPBChild) GetTestString() string {
	if m != nil {
		return m.TestString
	}
	return ""
}

func (m *TestPBChild) GetTestStrings() []string {
	if m != nil {
		return m.TestStrings
	}
	return nil
}

func (m *TestPBChild) GetTestMap() map[string]string {
	if m != nil {
		return m.TestMap
	}
	return nil
}

func (m *TestPBChild) GetTestUint64S() []uint64 {
	if m != nil {
		return m.TestUint64S
	}
	return nil
}

func (m *TestPBChild) GetTestBytes() []byte {
	if m != nil {
		return m.TestBytes
	}
	return nil
}

func (m *TestPBChild) GetTestFloats() []float32 {
	if m != nil {
		return m.TestFloats
	}
	return nil
}

func init() {
	proto.RegisterType((*TestPB)(nil), "main.TestPB")
	proto.RegisterMapType((map[string]string)(nil), "main.TestPB.TestMapEntry")
	proto.RegisterType((*TestPBChild)(nil), "main.TestPBChild")
	proto.RegisterMapType((map[string]string)(nil), "main.TestPBChild.TestMapEntry")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0x41, 0x4f, 0xc2, 0x30,
	0x14, 0xa6, 0xeb, 0x00, 0xf7, 0x36, 0x8d, 0x36, 0x1e, 0xaa, 0x89, 0xb5, 0x72, 0xea, 0x89, 0x18,
	0x24, 0x44, 0x39, 0x62, 0xf4, 0x66, 0x62, 0xa6, 0x9e, 0xc9, 0x70, 0x55, 0x17, 0x61, 0x90, 0xb5,
	0x98, 0xf0, 0x2f, 0xbc, 0xfb, 0x53, 0xfc, 0x03, 0x1e, 0x39, 0x7a, 0x34, 0xf0, 0x47, 0xcc, 0x5a,
	0x02, 0x4b, 0xf0, 0x66, 0x8c, 0xa7, 0xb5, 0xdf, 0xbe, 0xef, 0x7b, 0xef, 0x7b, 0x2f, 0x05, 0xd0,
	0x52, 0xe9, 0xfa, 0x28, 0x1b, 0xea, 0x21, 0x71, 0x07, 0x51, 0x92, 0xd6, 0xde, 0x30, 0x54, 0x6e,
	0xa5, 0xd2, 0xd7, 0x1d, 0xb2, 0x05, 0x4e, 0x12, 0x53, 0xc4, 0x91, 0x70, 0x43, 0x27, 0x89, 0xc9,
	0x21, 0xf8, 0x39, 0xbd, 0xab, 0x74, 0x96, 0xa4, 0x8f, 0xd4, 0xe1, 0x48, 0x78, 0xa1, 0x71, 0xb8,
	0x31, 0x08, 0x39, 0x82, 0xa0, 0x40, 0x50, 0x14, 0x73, 0x2c, 0xbc, 0xd0, 0x5f, 0x31, 0x14, 0x69,
	0xc2, 0x86, 0xa1, 0x0c, 0xa2, 0x11, 0x75, 0x39, 0x16, 0x7e, 0x63, 0xaf, 0x9e, 0xd7, 0xad, 0xdb,
	0x9a, 0xe6, 0x73, 0x15, 0x8d, 0x2e, 0x52, 0x9d, 0x4d, 0xc2, 0xaa, 0xb6, 0xb7, 0xa5, 0xf1, 0x38,
	0x49, 0x75, 0xab, 0xa9, 0x68, 0x99, 0x63, 0xe1, 0x5a, 0xe3, 0x3b, 0x0b, 0x91, 0x03, 0x9b, 0xa5,
	0xdb, 0x9b, 0x68, 0xa9, 0x68, 0x85, 0x23, 0x11, 0x84, 0x5e, 0x8e, 0x74, 0x72, 0x60, 0xd9, 0xfb,
	0x43, 0x7f, 0x18, 0x69, 0x45, 0xab, 0x1c, 0x0b, 0xc7, 0xf6, 0x7e, 0x69, 0x10, 0x72, 0xbc, 0xd0,
	0xdf, 0x3f, 0x25, 0xfd, 0x98, 0xc6, 0x1c, 0x09, 0xbf, 0xb1, 0x53, 0x6c, 0xed, 0x3c, 0xff, 0x61,
	0x2d, 0xcd, 0x91, 0xb4, 0x60, 0x73, 0xa5, 0xc8, 0x64, 0x4a, 0xa5, 0xc9, 0xf3, 0x83, 0x28, 0x58,
	0x8a, 0x32, 0x99, 0xee, 0xb7, 0x21, 0x28, 0xa6, 0x24, 0xdb, 0x80, 0x9f, 0xe5, 0xc4, 0xcc, 0xd9,
	0x0b, 0xf3, 0x23, 0xd9, 0x85, 0xf2, 0x4b, 0xd4, 0x1f, 0xcb, 0xc5, 0x88, 0xed, 0xa5, 0xed, 0x9c,
	0xa2, 0xda, 0xbb, 0x03, 0x7e, 0xc1, 0xf9, 0x4f, 0x56, 0x74, 0xb6, 0xb6, 0x22, 0xb6, 0x16, 0xe9,
	0xdf, 0xf6, 0xf4, 0x9b, 0xe9, 0x75, 0xe8, 0xc7, 0x8c, 0xa1, 0xe9, 0x8c, 0xa1, 0xaf, 0x19, 0x43,
	0xaf, 0x73, 0x56, 0x9a, 0xce, 0x59, 0xe9, 0x73, 0xce, 0x4a, 0xbd, 0x8a, 0x79, 0x02, 0x27, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x1b, 0x69, 0x29, 0x10, 0x03, 0x00, 0x00,
}

func (m *TestPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestChildren) > 0 {
		for iNdEx := len(m.TestChildren) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestChildren[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.TestChild != nil {
		{
			size, err := m.TestChild.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.TestFloats) > 0 {
		for iNdEx := len(m.TestFloats) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float32bits(float32(m.TestFloats[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f2))
		}
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestFloats)*4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TestBytes) > 0 {
		i -= len(m.TestBytes)
		copy(dAtA[i:], m.TestBytes)
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestBytes)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TestUint64S) > 0 {
		dAtA4 := make([]byte, len(m.TestUint64S)*10)
		var j3 int
		for _, num := range m.TestUint64S {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTest(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TestMap) > 0 {
		for k := range m.TestMap {
			v := m.TestMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTest(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TestStrings) > 0 {
		for iNdEx := len(m.TestStrings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TestStrings[iNdEx])
			copy(dAtA[i:], m.TestStrings[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.TestStrings[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TestString) > 0 {
		i -= len(m.TestString)
		copy(dAtA[i:], m.TestString)
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestString)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestPBChild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestPBChild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestPBChild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestFloats) > 0 {
		for iNdEx := len(m.TestFloats) - 1; iNdEx >= 0; iNdEx-- {
			f5 := math.Float32bits(float32(m.TestFloats[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f5))
		}
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestFloats)*4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TestBytes) > 0 {
		i -= len(m.TestBytes)
		copy(dAtA[i:], m.TestBytes)
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestBytes)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TestUint64S) > 0 {
		dAtA7 := make([]byte, len(m.TestUint64S)*10)
		var j6 int
		for _, num := range m.TestUint64S {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintTest(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TestMap) > 0 {
		for k := range m.TestMap {
			v := m.TestMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTest(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TestStrings) > 0 {
		for iNdEx := len(m.TestStrings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TestStrings[iNdEx])
			copy(dAtA[i:], m.TestStrings[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.TestStrings[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TestString) > 0 {
		i -= len(m.TestString)
		copy(dAtA[i:], m.TestString)
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestString)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTest(uint64(m.Id))
	}
	l = len(m.TestString)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.TestStrings) > 0 {
		for _, s := range m.TestStrings {
			l = len(s)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.TestMap) > 0 {
		for k, v := range m.TestMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTest(uint64(len(k))) + 1 + len(v) + sovTest(uint64(len(v)))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.TestUint64S) > 0 {
		l = 0
		for _, e := range m.TestUint64S {
			l += sovTest(uint64(e))
		}
		n += 1 + sovTest(uint64(l)) + l
	}
	l = len(m.TestBytes)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.TestFloats) > 0 {
		n += 1 + sovTest(uint64(len(m.TestFloats)*4)) + len(m.TestFloats)*4
	}
	if m.TestChild != nil {
		l = m.TestChild.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if len(m.TestChildren) > 0 {
		for _, e := range m.TestChildren {
			l = e.Size()
			n += 2 + l + sovTest(uint64(l))
		}
	}
	return n
}

func (m *TestPBChild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTest(uint64(m.Id))
	}
	l = len(m.TestString)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.TestStrings) > 0 {
		for _, s := range m.TestStrings {
			l = len(s)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.TestMap) > 0 {
		for k, v := range m.TestMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTest(uint64(len(k))) + 1 + len(v) + sovTest(uint64(len(v)))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.TestUint64S) > 0 {
		l = 0
		for _, e := range m.TestUint64S {
			l += sovTest(uint64(e))
		}
		n += 1 + sovTest(uint64(l)) + l
	}
	l = len(m.TestBytes)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.TestFloats) > 0 {
		n += 1 + sovTest(uint64(len(m.TestFloats)*4)) + len(m.TestFloats)*4
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestStrings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestStrings = append(m.TestStrings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestMap == nil {
				m.TestMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TestMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TestUint64S = append(m.TestUint64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TestUint64S) == 0 {
					m.TestUint64S = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TestUint64S = append(m.TestUint64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TestUint64S", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestBytes = append(m.TestBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.TestBytes == nil {
				m.TestBytes = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.TestFloats = append(m.TestFloats, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.TestFloats) == 0 {
					m.TestFloats = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.TestFloats = append(m.TestFloats, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TestFloats", wireType)
			}
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestChild == nil {
				m.TestChild = &TestPBChild{}
			}
			if err := m.TestChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestChildren", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestChildren = append(m.TestChildren, &TestPBChild{})
			if err := m.TestChildren[len(m.TestChildren)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestPBChild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestPBChild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestPBChild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestStrings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestStrings = append(m.TestStrings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestMap == nil {
				m.TestMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TestMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TestUint64S = append(m.TestUint64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TestUint64S) == 0 {
					m.TestUint64S = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TestUint64S = append(m.TestUint64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TestUint64S", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestBytes = append(m.TestBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.TestBytes == nil {
				m.TestBytes = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.TestFloats = append(m.TestFloats, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.TestFloats) == 0 {
					m.TestFloats = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.TestFloats = append(m.TestFloats, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TestFloats", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
