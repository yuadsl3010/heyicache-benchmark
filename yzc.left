func BenchIfc(b *testing.B, ifc TestCacheIfc) {
	result := &BenchResult{}
	wg := &sync.WaitGroup{}
	wg.Add(goroutineNum)
	for g := 0; g < goroutineNum; g++ {
		go func(gIdx int) {
			defer wg.Done()
			for i := 0; i < b.N; i++ {
				id := getId(i, gIdx)
				for j := 0; j < checkNum; j++ {
					if j%checkNum == 0 {
						// 1th set
						k, v := NewTestStruct(id)
						if err := ifc.Set(k, v); err != nil {
							result.WriteFail++
						} else {
							result.WriteSuccess++
						}
					} else {
						// 2~100th get
						v, ok := ifc.Get(GetKey(id))
						if ok {
							result.ReadSuccess++
							if j%checkNum == checkNum-1 {
								// 100th check
								if CheckTestStruct(id, v, false) {
									result.CheckSuccess++
								} else {
									result.CheckFail++
								}
							}
						} else {
							result.ReadMiss++
						}
					}
				}
			}
		}(g)
	}
	wg.Wait()
}